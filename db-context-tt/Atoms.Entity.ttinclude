
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#+ 

	

	public class AtomPluralService{

		public static void Add(string singular,string plural)
		{
			Singlulars[singular] = plural;
			Plurals[plural] = singular;
		}

		public static AtomPluralService Intance = new AtomPluralService();

		private static Dictionary<string,string> Singlulars;
		private static Dictionary<string,string> Plurals;

		private AtomPluralService ()
		{
			Singlulars  = new Dictionary<string,string>();
			Plurals = new Dictionary<string,string>();
			Add("case","cases");
		}

		private static char[] vowels = new char[] { 'a','e','i','o','u' };

		#region private string ToPlural(string p)
		public static string ToPlural(string p)
		{

			string r = null;
			if(Singlulars.TryGetValue(p, out r))
				return r;

			if (string.IsNullOrWhiteSpace(p))
				return p;

			if (p.EndsWith("y"))
			{
				char ch = p[p.Length - 2];
				ch = char.ToLower(ch);
				if (vowels.Contains(ch)) {
					return p + "s";
				}
				return p.Substring(0, p.Length - 1) + "ies";
			}
			if (p.EndsWith("x") || p.EndsWith("s"))
				return p + "es";
			if (p.EndsWith("es"))
				return p;
			return p + "s";
		}
		#endregion

		public static string ToSingular(string tableName)
		{
			string r = null;
			if(Plurals.TryGetValue(tableName,out r))
				return r;
			if (tableName.EndsWith("ies"))
				return tableName.Substring(0, tableName.Length - 3) + "y";
			if (tableName.EndsWith("xes"))
				return tableName.Substring(0, tableName.Length - 2);
			if (tableName.EndsWith("s"))
				return tableName.Substring(0, tableName.Length - 1);
			return tableName;
		}

	}


	#region EABaseObject
	public class EABaseObject{
		public string Name { get; set; }
		public string Description { get; set; }
		public string Summary { get; set; }
		public object Parent {get;set;}
		public object Document {get;set;}
	}
	#endregion

	#region EAAssociation
	public class EAAssociation : EABaseObject{
		public string PrimaryTable { get; set; }

		public string PrimaryColumn { get; set; }

		public string DependentTable { get; set; }

		public string DependentColumn { get; set; }

		public bool IsDependentNullbable { get; set;}

		public bool IsDependentPrimary {
			get;
			set ;
		}

		public string DeleteAction {
			get ;
			set ;
		}

		public string UpdateAction
		{
			get;
			set;
		}
		
		public string PrincipalRole
		{
			get
			{
				return PrimaryTable + PrimaryColumn;
			}
			set
			{
				
			}
		}

		public string DependentRole
		{
			get
			{
				return DependentTable + DependentColumn;
			}
			set
			{

			}
		}

		public string PrincipalType
		{
			get;
			set;
		}

		public string DependentType
		{
			get;
			set;
		}
	}
#endregion

	#region EAEntity
	public class EAEntity : EABaseObject
	{

		public EAEntity()
		{
			
		}

		public string BaseType
		{
			get;
			set;
		}

		public bool Include {
			get;
			set;
		}


		public string TableName {
			get ;
			set ;
		}

		public string EntitySet
		{
			get
			{
				return EAContainerBuilder.ToPlural(Name);
			}
		}

		public string Schema
		{
			get;
			set;
		}

		public IEnumerable<EAEntityProperty> ActiveProperties
		{
			get
			{
				return Properties.Where(x => x.IsActive);
			}
		}

		private EAEntityPropertyCollection _Properties = new EAEntityPropertyCollection();
		public EAEntityPropertyCollection Properties
		{
			get {
				return _Properties;
			}
		}

		private EANavigationPropertyCollection _NavigationProperties = new EANavigationPropertyCollection();
		public EANavigationPropertyCollection NavigationProperties
		{
			get {
				return _NavigationProperties;
			}
		}

		public IEnumerable<EANavigationProperty> ParentProperties
		{
			get
			{
				return NavigationProperties.Where(x => x.Multiplicity != EAMultiplicity.Many);
			}
		}

		public IEnumerable<EANavigationProperty> ChildProperties
		{
			get
			{
				return NavigationProperties.Where(x => x.Multiplicity == EAMultiplicity.Many);
			}
		}

	   
	}
	#endregion

	#region EAContainer
	public class EAContainer : EABaseObject
	{

		public EAContainer()
		{
			this.Provider = "System.Data.SqlClient";
			this.PluralTableNames = true;
			this.IgnoreTables = "sysdiagram";
			this.Name = "Model";
			this.ContainerName = "ModelEntities";
			this.Namespace = "Model.Web";
		}

		public string ContainerName
		{
			get;
			set;
		}

		private EAEntityCollection _Entities = new EAEntityCollection();
		public EAEntityCollection Entities {
			get {
				return _Entities;
			}
		}


		public IEnumerable<EAEntity> ActiveEntities
		{
			get
			{
				return Entities.Where(x => x.Include);
			}
		}

		private EAAssociationCollection _Associations = new EAAssociationCollection();
		public EAAssociationCollection Associations
		{
			get {
				return _Associations;
			}
		}

		public string Namespace { 
			get;
			set;
		}


		public string ConnectionString
		{
			get;
			set;
		}

		public string IgnoreTables {
			get;
			set;
		}

		public string Provider
		{
			get;
			set;
		}

		public bool PluralTableNames
		{
			get ;
			set;
		}

		public void Refresh() {
			EAContainerBuilder builder = EAContainerBuilder.GetBuilder(this);
			builder.Refresh();
		}

	}
	#endregion

	public class EAEntityCollection : List<EAEntity> {
	}


	public class EAAssociationCollection : List<EAAssociation> {
	}


	public class EAEntityProperty : EABaseObject
	{


		#region public override string  ToString()
		public override string ToString()
		{
			return ObjectName + "." + Name;
		}
		#endregion

		public PrimitiveTypeKind EdmType
		{
			get;
			set;
		}

		public bool? Unicode {
			get;
			set;
		}

		public byte? Precision
		{
			get;
			set;
		}

		public byte? Scale
		{
			get;
			set;
		}


		public bool IsNullable
		{
			get;
			set;
		}

		public bool Serialize
		{
			get;
			set;
		}

		// used for validation...
		public string DataType
		{
			get;
			set;
		}

		public decimal Length {
			get;
			set;
		}

		public string FieldName {
			get;
			set;
		}

		/// <summary>
		/// Database Field Type (Native Database Type)
		/// </summary>
		public string FieldType {
			get;
			set;
		}

		public bool IsActive {
			get;
			set;
		}

		public bool IsRequired {
			get;
			set;
		}

		public bool IsIdentity { 
			get;
			set;
		}

		public bool IsPrimary { 
			get;
			set;
		}


		public string Label
		{
			get;
			set;
		}

		public string Default {
			get;
			set;
		}


		public decimal StartRange
		{
			get;
			set;
		}

		public decimal EndRange
		{
			get;
			set;
		}

		public string RegularExpression
		{
			get;
			set;
		}

		public string Scaffold 
		{
			get;
			set;
		}

		public string ObjectName
		{
			get
			{
				EAEntity p = (Parent as EAEntity);
				if (p == null)
					return null;
				return p.Name;
			}
		}

		public bool Indexed { 
			get;
			set;
		}

		public EAEntityProperty RelatedProperty
		{
			get
			{
				EAEntity obj = this.Parent as EAEntity;

				EAContainer c = this.Document as EAContainer;

				foreach (var np in obj.NavigationProperties)
				{
					EAAssociation a = c.Associations.FirstOrDefault(
						x => x.Name == np.Association &&
						(x.DependentColumn == this.FieldName &&
							x.DependentTable == obj.TableName
						)
						);
					if (a == null)
						continue;
					EAEntity pObject = c.Entities.First(x => x.TableName == a.PrimaryTable);
					EAEntityProperty p = pObject.Properties.First(x => x.FieldName == a.PrimaryColumn);
					return p;
				}
				return null;

			}
		}

		public EANavigationProperty NavigationProperty
		{
			get
			{
				EAEntity obj = this.Parent as EAEntity;

				EAContainer c = this.Document as EAContainer;

				foreach (var np in obj.NavigationProperties)
				{
					EAAssociation a = c.Associations.FirstOrDefault(
						x => x.Name == np.Association &&
						   
							x.DependentRole==np.FromRole &&
						(x.DependentColumn == this.FieldName &&
							x.DependentTable == obj.TableName
						));
					if (a == null)
						continue;
					return np;
				}
				return null;
			}
		}

		public List<EAEntityProperty> RelatedProperties
		{
			get
			{
				List<EAEntityProperty> list = new List<EAEntityProperty>();
				EAEntity obj = this.Parent as EAEntity;

				EAContainer c = this.Document as EAContainer;

				foreach (var np in obj.NavigationProperties)
				{
					EAAssociation a = c.Associations.FirstOrDefault(
						x => x.Name == np.Association && 
						(x.DependentColumn== this.FieldName && 
							x.DependentTable== obj.TableName
						)
						);
					if (a == null)
						continue;
					//if (np.FromRole == a.DependentRole)
					{
						EAEntity pObject = c.Entities.First(x => x.TableName == a.PrimaryTable);
						EAEntityProperty p = pObject.Properties.First(x => x.FieldName == a.PrimaryColumn);
						if(!list.Contains(p))
						list.Add(p);
					}
				}
				return list;
			}
		}
	} 

	public class EAEntityPropertyCollection : List<EAEntityProperty>{}


	public class EANavigationProperty : EABaseObject
	{

		public bool Include {
			get;
			set;
		}

		public bool VerifyID {
			get;
			set;
		}

		public bool CascadeDelete
		{
			get;
			set;
		}

		public bool PreventDelete
		{
			get;
			set;
		}

		public string Type {
			get;
			set;
		}

		public string Association {
			get;
			set;
		}

		public EAMultiplicity Multiplicity
		{ 
			get;
			set;
		}

		public string ToRole
		{
			get;
			set;
		}

		public string FromRole
		{
			get;
			set;
		}

		public EAEntityProperty SelfProperty
		{
			get
			{
				EAEntity obj = this.Parent as EAEntity;

				EAContainer c = this.Document as EAContainer;

				EAAssociation a = c.Associations.First(x => x.Name == Association);

				String f = null;

				if (a.PrincipalRole == FromRole)
				{
					f = a.PrimaryColumn;
				}
				else
				{
					f = a.DependentColumn;
				}

				return obj.Properties.First(x => x.FieldName == f);
			}
		}


		public EAEntityProperty OtherProperty
		{
			get
			{
				EAEntity obj = this.Parent as EAEntity;

				EAContainer c = this.Document as EAContainer;

				EAAssociation a = c.Associations.First(x => x.Name == Association);

				String f = null;
				String t = null;

				if (a.PrincipalRole == ToRole)
				{
					f = a.PrimaryColumn;
					t = a.PrimaryTable;
				}
				else
				{
					f = a.DependentColumn;
					t = a.DependentTable;
				}

				obj = c.Entities.First(x => x.TableName == t);

				return obj.Properties.First(x => x.FieldName == f);
			}
		}

		public bool ZeroOrOneToOne
		{
			get
			{
				return this.Multiplicity == EAMultiplicity.ZeroOrOne && this.OtherNavigationProperty.Multiplicity == EAMultiplicity.One;
			}
		}
		public bool OneToZeroOrOne
		{
			get
			{
				return this.Multiplicity == EAMultiplicity.One && this.OtherNavigationProperty.Multiplicity == EAMultiplicity.ZeroOrOne;
			}
		}

		public bool OneToMany
		{
			get
			{
				return this.Multiplicity == EAMultiplicity.One && this.OtherNavigationProperty.Multiplicity == EAMultiplicity.Many;
			}
		}

		public bool ZeroOrOneToMany
		{
			get
			{
				return this.Multiplicity == EAMultiplicity.ZeroOrOne && this.OtherNavigationProperty.Multiplicity == EAMultiplicity.Many;
			}
		}


		public EANavigationProperty OtherNavigationProperty
		{
			get
			{
				EAEntity obj = this.Parent as EAEntity;

				EAContainer c = this.Document as EAContainer;

				EAAssociation a = c.Associations.First(x => x.Name == Association);

				String fr = null;
				string tr = null;
				String t = null;

				if (a.DependentRole == FromRole)
				{
					fr = a.PrincipalRole;
					tr = a.DependentRole;
					t = a.PrimaryTable;
				}
				else
				{
					fr = a.DependentRole;
					tr = a.PrincipalRole;
					t = a.DependentTable;
				}

				obj = c.Entities.First(x => x.TableName == t);

				return obj.NavigationProperties.First(x => x.FromRole == fr && x.ToRole==tr);
			}
		}

	}

	public enum EAMultiplicity : int { 
		None = 0,
		ZeroOrOne = 1,
		One = 2,
		Many = 3
	}

	public class EANavigationPropertyCollection : List<EANavigationProperty>{}

	public static class AtomEdmHelper
	{

		public static bool? IsUnicode(EdmProperty property)
		{
			TypeUsage type = property.TypeUsage;
			Facet facet = type.Facets.FirstOrDefault(x => x.Name == "Unicode");
			if (facet == null)
				return null;
			return (bool)facet.Value;
		}

		public static byte? IsPrecision(EdmProperty property)
		{
			TypeUsage type = property.TypeUsage;
			Facet facet = type.Facets.FirstOrDefault(x => x.Name == "Precision");
			if (facet== null)
				return null;
			return (byte)facet.Value;
		}

		public static byte? IsScale(EdmProperty property)
		{
			TypeUsage type = property.TypeUsage;
			Facet facet = type.Facets.FirstOrDefault(x => x.Name == "Scale");
			if (facet == null)
				return null;
			return (byte)facet.Value;
		}


		public static int GetMaxLength(EdmProperty property) {
			TypeUsage type = property.TypeUsage;
			Facet facet = type.Facets.FirstOrDefault(x=>x.Name == "MaxLength");
			if (facet == null)
				return 0;
			int maxVal =  (int)facet.Value;

			PrimitiveType pt = type.EdmType as PrimitiveType;
			if (pt == null)
				return maxVal;

			var fd = pt.FacetDescriptions.FirstOrDefault(x => x.FacetName == "MaxLength");
			if (fd == null)
				return maxVal;

			if (fd.MaxValue.GetValueOrDefault() == maxVal)
				return -1;

			return maxVal;
		}

		public static string GetDefault(EdmProperty property) {
			TypeUsage type = property.TypeUsage;
			Facet facet = type.Facets.FirstOrDefault(x=>x.Name == "DefaultValue");
			if (facet == null)
				return null;
			return facet.Value != null ? facet.Value.ToString() : null;
		}

		public static bool IsIdentity(EdmProperty property) {
			TypeUsage type = property.TypeUsage;
			Facet facet = type.Facets.FirstOrDefault(x=>x.Name == "StoreGeneratedPattern");
			if (facet == null)
				return false;
			if (((StoreGeneratedPattern)facet.Value) == StoreGeneratedPattern.Identity)
				 return true;
			System.Diagnostics.Trace.WriteLine(property.Name + "=" + facet.Value);
			return false;
		}

		public static bool IsPrimary(EdmProperty property) {
			EntityType type = property.DeclaringType as EntityType;
			return type.KeyMembers.Any(x => x.Name == property.Name);
		}

		public static string GetClrType(EdmProperty property) {
			return (property.TypeUsage.EdmType as PrimitiveType).ClrEquivalentType.FullName;
		}

		public static PrimitiveTypeKind GetEdmType(EdmProperty property) {
			return (property.TypeUsage.EdmType as PrimitiveType).PrimitiveTypeKind;
		}
	}	


	public class EAContainerBuilder
	{
		protected string metadataDataType = "data_type";
		protected string metadataLength = "character_maximum_length";
		protected string metadataNullable = "is_nullable";
		protected string metadataIndexName = "INDEX_NAME";
		protected string metadataColumnName = "column_name";
		protected string metadataTableName = "table_name";
		protected string metadataSchema = "table_schema";

		public EAContainer Container { get; private set; }

		public EntityStoreSchemaGenerator Generator { get; private set; }


		/// <summary>
		/// 
		/// </summary>
		/// <param name="container"></param>
		/// <returns></returns>
		public static EAContainerBuilder GetBuilder(EAContainer container)
		{
			EntityStoreSchemaGenerator generator = new EntityStoreSchemaGenerator(container.Provider, container.ConnectionString, container.Namespace);
			EAContainerBuilder b = new EAContainerBuilder();
			b.Container = container;
			b.Generator = generator;
			return b;
		}


		#region internal void Refresh(EAContainer eAContainer,string connectionString)
		public virtual void Refresh()
		{
			Generator.GenerateForeignKeyProperties = true;
			List<EntityStoreSchemaFilterEntry> filters = new List<EntityStoreSchemaFilterEntry>();
			filters.Add(new EntityStoreSchemaFilterEntry(null, null, null, EntityStoreSchemaFilterObjectTypes.All, EntityStoreSchemaFilterEffect.Allow));
			Generator.GenerateStoreMetadata(filters);

			RefreshTables();
			RefreshAssociations();
			RefreshNavigationProperties();
			RefreshNavigationPropertyNames();

		}
		#endregion

		#region private void RefreshNavigationPropertyNames()
		private void RefreshNavigationPropertyNames()
		{
			foreach (EAEntity obj in Container.Entities)
			{
				foreach (var item in obj.NavigationProperties.GroupBy(x => x.Name))
				{
					if (item.Count() > 1)
					{
						int i = 0;
						foreach (var g in item)
						{
							if (i > 0)
								g.Name += i.ToString();
							i++;
						}
					}
				}

				foreach (var item in obj.NavigationProperties)
				{
					// special case of One-ZeroOne Relation
					if(item.Multiplicity == EAMultiplicity.One && item.OtherNavigationProperty.Multiplicity == EAMultiplicity.ZeroOrOne){
						item.Name = ((EAEntity)item.OtherNavigationProperty.Parent).Name;
						item.OtherNavigationProperty.Name = obj.Name;
					}else{
						if (item.Name == obj.Name) {
							item.Name += "Object";
						}
					}
				}
			}
		}
		#endregion


		#region private void RefreshNavigationProperties()
		private void RefreshNavigationProperties()
		{
			

			foreach (EAAssociation item in Container.Associations)
			{
				// for every table of primary...
				EAEntity primaryObject = Container.Entities.FirstOrDefault(x => x.TableName == item.PrimaryTable);
				EAEntityProperty primaryProperty = primaryObject.Properties.FirstOrDefault(x => x.FieldName == item.PrimaryColumn);

				EAEntity dependentObject = Container.Entities.FirstOrDefault(x => x.TableName == item.DependentTable);
				EAEntityProperty dependentProperty = dependentObject.Properties.FirstOrDefault(x => x.FieldName == item.DependentColumn);


				EANavigationProperty pn = primaryObject.NavigationProperties.FirstOrDefault(
					x => x.Association == item.Name && x.FromRole == item.PrincipalRole);

				ClearUnusedProperties(item, primaryObject);

				ClearUnusedProperties(item, dependentObject);

				EANavigationProperty dn = dependentObject.NavigationProperties.FirstOrDefault(
					x => x.Association == item.Name && x.FromRole== item.DependentRole);

				bool exists = pn != null && dn != null;

				if (pn == null)
				{
					pn = new EANavigationProperty();
					pn.Association = item.Name;
					pn.Type = dependentObject.Name;

					string colRefName = GetReferenceName(dependentProperty.FieldName);
					if (colRefName != primaryObject.Name)
					{
						colRefName = dependentObject.Name + colRefName;
					}
					else
					{
						colRefName = dependentObject.Name;
					}
					pn.Name = colRefName;
					pn.Multiplicity = IsOnlyPrimary(dependentProperty, dependentObject) ? EAMultiplicity.ZeroOrOne : EAMultiplicity.Many;
					if (pn.Multiplicity == EAMultiplicity.Many)
					{
						pn.Name = ToPlural(pn.Name);
						if (dependentObject.Name == primaryObject.Name)
						{
							if(dependentProperty.FieldName.StartsWith("Parent")){
								pn.Name = ToPlural("Child" + dependentObject.Name);
							}else{
								string n = dependentProperty.Name;
								if(n.ToLower().EndsWith("id")){
									n = n.Substring(0,n.Length-2);
								}
								pn.Name = ToPlural(n + dependentObject.Name);
							}
						}
					}                    
					primaryObject.NavigationProperties.Add(pn);
					pn.Parent = primaryObject;
					pn.Document = this.Container;
				}

				if (dn == null) 
				{
					dn = new EANavigationProperty();
					dn.Association = item.Name;
					dn.Type = primaryObject.Name;
					string colRefName = GetReferenceName(dependentProperty.FieldName);
					dn.Name = colRefName;
					dn.Multiplicity = dependentProperty.IsNullable ? EAMultiplicity.ZeroOrOne : EAMultiplicity.One;
					dependentObject.NavigationProperties.Add(dn);
					dn.Parent = dependentObject;
					dn.Document = this.Container;
				}

				if (!exists)
				{
					if (dependentObject.Properties.Any(x => x.Name == dn.Name))
					{
						dn.Name = dn.Name + "Property";
					}

					if (primaryObject.Properties.Any(x => x.Name == pn.Name))
					{
						pn.Name = pn.Name + "Property";
					}


					//item.PrincipalType = dn.Type;
					//item.DependentType = pn.Type;
				}

				//if (primaryObject.Name == "ConfigurationItem")
				//{
				//    Trace.WriteLine("");
				//    Debugger.Break();
				//}

				dn.ToRole = item.PrincipalRole;
				pn.ToRole = item.DependentRole;

				dn.FromRole = item.DependentRole;
				pn.FromRole = item.PrincipalRole;
			}
		}

		private static bool IsOnlyPrimary(EAEntityProperty dependentProperty, EAEntity dependentObject)
		{
			if (!dependentProperty.IsPrimary)
				return false;

			if (dependentObject.Properties.Count(x => x.IsPrimary) == 1)
				return true;
			return false;
		}

		private static void ClearUnusedProperties(EAAssociation item, EAEntity primaryObject)
		{
			foreach (var nav in primaryObject.NavigationProperties.Where(
					x => x.Association == item.Name && x.FromRole != item.PrincipalRole &&
						x.FromRole != item.DependentRole
				).ToArray())
			{
				primaryObject.NavigationProperties.Remove(nav);
			}
		}

		#region private string GetReferenceName(string p)
		private string GetReferenceName(string p)
		{
			string pl = p.ToLower();
			if (pl.EndsWith("_id"))
				return p.Substring(0, p.Length - 3);
			if (pl.EndsWith("id"))
				return p.Substring(0, p.Length - 2);
			return p;
		}
		#endregion

		#endregion

		private static char[] vowels = new char[] { 'a','e','i','o','u' };

		#region private string ToPlural(string p)
		public static string ToPlural(string p)
		{
			if (string.IsNullOrWhiteSpace(p))
				return p;
			return AtomPluralService.ToPlural(p);
		}
		#endregion



		#region private void RefreshAssociations()
		protected virtual void RefreshAssociations()
		{
			List<EAAssociation> associtaions = GetAssociations().ToList();

			foreach (var item in Container.Associations.Where(x => !associtaions.Any(y => y.Name == x.Name)).ToArray())
			{
				Container.Associations.Remove(item);

				foreach (var obj in Container.Entities)
				{
					foreach (var np in obj.NavigationProperties.Where(x => x.Association == item.Name).ToArray())
					{
						obj.NavigationProperties.Remove(np);
					}
				}
			}
			Container.Associations.Clear();
			foreach (EAAssociation item in associtaions)
			{
				Container.Associations.Add(item);
			}
		}

		protected virtual IEnumerable<EAAssociation> GetAssociations()
		{

			foreach (var row in Generator.EntityContainer.BaseEntitySets.OfType<AssociationSet>())
			{
				string constraintName = row.Name;
				string deleteAction = null;
				string updateAction = null;

				ReferentialConstraint rc = row.ElementType.ReferentialConstraints[0];

				EdmProperty fromProperty = rc.FromProperties[0];
				EdmProperty toProperty = rc.ToProperties[0];

				EAAssociation a = new EAAssociation();
				a.Name = constraintName;
				a.PrimaryTable = fromProperty.DeclaringType.Name;
				a.PrimaryColumn = fromProperty.Name;
				a.DependentTable = toProperty.DeclaringType.Name;
				a.DependentColumn = toProperty.Name;
				a.DeleteAction = deleteAction;
				a.UpdateAction = updateAction;
				yield return a;
			}
		}
		#endregion


		#region private void RefreshTables(EAContainer container,DbConnection conn)
		protected virtual void RefreshTables()
		{
			List<EAEntity> tables = GetTables().OrderBy(x=>x.TableName).ToList();
			foreach (EAEntity table in tables)
			{
				EAEntity obj = Container.Entities.FirstOrDefault(x => x.TableName == table.TableName);
				if (obj == null)
				{
					Container.Entities.Add(table);
				}
				else {
					obj.Schema = table.Schema;
				}
				table.Document = this.Container;
			}

			foreach (EAEntity item in
				Container.Entities.Where(x => !tables.Any(y => y.TableName == x.TableName)).ToArray()
				)
			{
				Container.Entities.Remove(item);
			}

			foreach (EAEntity table in Container.Entities)
			{
				RefreshColumns(table);
			}
		}

		protected virtual IEnumerable<EAEntity> GetTables()
		{
			foreach (EntitySet item in Generator.EntityContainer.BaseEntitySets.OfType<EntitySet>())
			{
				string tableName = item.Name;
				if ((!string.IsNullOrEmpty(Container.IgnoreTables)) && Container.IgnoreTables.ToLower().IndexOf(tableName.ToLower()) != -1)
					continue;
				MetadataProperty schemaItem = item.MetadataProperties["Schema"];
				string schema = schemaItem!= null ? (schemaItem.Value as string) : null;
				if (string.IsNullOrWhiteSpace(schema))
					schema = "dbo";
				string objectName = tableName;
				if(Container.PluralTableNames)
					objectName = ToSingular(tableName);
				objectName = EscapeName(objectName);
				yield return new EAEntity { TableName=tableName, Name=objectName, Include=true , Schema=schema };
			}
		}

		private string EscapeName(string objectName)
		{
			return objectName.Replace(' ', '_');
		}

		protected virtual void RefreshColumns(EAEntity obj)
		{
			var cols = GetColumns(obj.TableName);

			foreach (var col in cols)
			{

				EAEntityProperty p = obj.Properties.FirstOrDefault(x => x.FieldName == col.Field.FieldName);
				if (p == null)
				{
					p = col.Field;
					p.Name = col.Field.FieldName;
					p.FieldName = col.Field.FieldName;
					p.IsActive = true;
					obj.Properties.Add(p);
				}
				if (string.IsNullOrWhiteSpace(p.Name))
					p.Name = p.FieldName;
				p.Name = EscapeName(p.Name);
				p.FieldType = col.Field.FieldType;
				p.IsNullable = col.Field.IsNullable;
				p.IsIdentity = col.Field.IsIdentity;
				p.IsPrimary = col.Field.IsPrimary;
				p.EdmType = col.Field.EdmType;
				p.IsRequired = !p.IsNullable;
				p.Length = col.Field.Length;
				p.Unicode = col.Field.Unicode;
				p.Precision = col.Field.Precision;
				p.Scale = col.Field.Scale;
				p.Parent = obj;
				p.Document = this.Container;
			}

			foreach (EAEntityProperty p1 in obj.Properties.Where(x => !cols.Any(y => y.Field.FieldName == x.FieldName)).ToArray())
			{
				obj.Properties.Remove(p1);
			}
		}

		protected virtual IEnumerable<ColumnInfo> GetColumns(string tableName) {
			EntityType type = Generator.EntityContainer.BaseEntitySets.OfType<EntitySet>().First(x => x.Name == tableName).ElementType;
			foreach (EdmProperty row in type.Properties)
			{
				yield return GetColumnInfo(tableName,row);
			}
		}

		protected virtual ColumnInfo GetColumnInfo(string tableName,EdmProperty row) {
			return new ColumnInfo
			{
				TableName = tableName,
				Field = new EAEntityProperty
				{
					FieldName = row.Name,
					IsNullable = row.Nullable,
					Length = AtomEdmHelper.GetMaxLength(row),
					FieldType = row.TypeUsage.EdmType.Name,
					Default = AtomEdmHelper.GetDefault(row),
					IsPrimary = AtomEdmHelper.IsPrimary(row),
					IsIdentity = AtomEdmHelper.IsIdentity(row),
					EdmType = AtomEdmHelper.GetEdmType(row),
					Unicode = AtomEdmHelper.IsUnicode(row),
					Precision = AtomEdmHelper.IsPrecision(row),
					Scale = AtomEdmHelper.IsScale(row),
					Serialize = AtomEdmHelper.IsPrimary(row)
				}
			};
		}

		public class ColumnInfo {

			public string TableName { get; set; }

			public EAEntityProperty Field { get; set; }
		}

		#region private void RefreshFieldType(EAEntityProperty p)
		//protected virtual DbType GetFieldType(DataRow row)
		//{
		//    string dataType = row[metadataDataType] as string;
		//    string colName = row[metadataColumnName] as string;
		//    string tableName = row[metadataTableName] as string;
		//    decimal length = GetColumnLength(row);
		//    DbType retVal = DbType.AnsiString;
		//    Trace.WriteLine(string.Format("{0}:{1}", row[metadataColumnName], dataType.ToLower()));
		//    switch (dataType.ToLower())
		//    {
		//        case "varchar":
		//        case "char":
		//        case "text":
		//            retVal = DbType.AnsiString;
		//            if (length > 0)
		//                retVal = DbType.AnsiStringFixedLength;
		//            break;
		//        case "nvarchar":
		//        case "nchar":
		//        case "ntext":
		//            retVal = DbType.String;
		//            if (length > 0)
		//                retVal = DbType.StringFixedLength;
		//            break;
		//        case "tinyint" :
		//            retVal = DbType.SByte;
		//            break;
		//        case "smallint":
		//            retVal = DbType.Int16;
		//            break;
		//        case "int":
		//            retVal = DbType.Int32;
		//            break;
		//        case "bigint":
		//            retVal = DbType.Int64;
		//            break;
		//        case "numeric":
		//        case "money":
		//        case "decimal":
		//            retVal = DbType.Decimal;
		//            break;
		//        case "double":
		//            retVal = DbType.Double;
		//            break;
		//        case "float":
		//            retVal = DbType.Single;
		//            break;
		//        case "date":
		//            retVal = DbType.Date;
		//            break;
		//        case "datetime":
		//        case "smalldatetime":
		//            retVal = DbType.DateTime;
		//            break;
		//        case "bit":
		//            retVal = DbType.Boolean;
		//            break;
		//        case "varbinary":
		//        case "image":
		//            retVal = DbType.Binary;
		//            break;
		//        case "id":
		//        case "uniqueidentifier":
		//        case "guid":
		//            retVal = DbType.Guid;
		//            break;
		//        case "time":
		//            retVal = DbType.Time;
		//            break;
		//        case "xml":
		//            retVal = DbType.Xml;
		//            break;
		//        default:
		//            throw new InvalidOperationException("No type mapping available for " + dataType + " in " + tableName + "." + colName);
		//    }
		//    return retVal;
		//}
		#endregion

		#endregion

		#region private string ToSingular(string tableName)
		internal static string ToSingular(string tableName)
		{
			return AtomPluralService.ToSingular(tableName);
		}
		#endregion


	}


 public class TypeHelper
	{
		public static string ToStorageType(EAEntityProperty p)
		{
			return p.FieldType;
		}

		public static string ToConceptualType(EAEntityProperty p)
		{
			return p.EdmType.ToString();
		}

        public static string ToClrType(EAEntityProperty p)
        {
            string type = _ToClrType(p);
            if (type == "String" || type == "Byte[]" || type == "Data.Entity.Spatial.DbGeography")
                return type;
            if (p.IsNullable)
                return type + "?";
            return type;
        }

		public static string ToClrTypeVB(EAEntityProperty p)
		{
			string type = _ToClrTypeVB(p);
			if (type == "String" || type == "Byte()")
				return type;
			if (p.IsNullable)
				return "Nullable(Of " + type + ")";
			return type;
		}

		public static string ToClrTypeVBPrimitive(EAEntityProperty p)
		{
			string type = _ToClrTypeVBPrimitive(p);
			if (type == "String" || type == "Byte()")
				return type;
			if (p.IsNullable)
				return type + "?";
			return type;
		}

        public static string _ToClrType(EAEntityProperty p)
        {
            switch (p.EdmType)
            {
                case System.Data.Metadata.Edm.PrimitiveTypeKind.Binary:
                    return "Byte[]";
                case System.Data.Metadata.Edm.PrimitiveTypeKind.Time:
                    return "TimeSpan";
                case System.Data.Metadata.Edm.PrimitiveTypeKind.Geography:
                    return "Data.Entity.Spatial.DbGeography";
            }
            return p.EdmType.ToString();
        }

		public static string _ToClrTypeVB(EAEntityProperty p)
		{
			switch (p.EdmType)
			{
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Binary:
					return "Byte()";
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Time:
					return "TimeSpan";
			}
			return p.EdmType.ToString();
		}

		public static string _ToClrTypeVBPrimitive(EAEntityProperty p)
		{
			switch (p.EdmType)
			{
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Binary:
					return "Byte()";
				case System.Data.Metadata.Edm.PrimitiveTypeKind.Time:
					return "TimeSpan";
			}
			return p.EdmType.ToString();
		}
	}

#>
